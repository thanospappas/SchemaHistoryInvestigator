CREATE TABLE `Projects` (
	`PRJ_ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`PRJ_NAME`	TEXT
);
CREATE TABLE IF NOT EXISTS "Branches" (
	`BR_ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`BR_NAME`	TEXT,
	`BR_PRJ_ID`	INTEGER,
	FOREIGN KEY(`BR_PRJ_ID`) REFERENCES `Projects`(`PRJ_ID`) ON DELETE CASCADE
);
CREATE TABLE `Schema_Histories` (
	`SH_ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`SH_BR_ID`	INTEGER,
	`SH_NAME`	TEXT,
	FOREIGN KEY(`SH_NAME`) REFERENCES `Branches`(`BR_ID`) ON DELETE CASCADE
);
CREATE TABLE `Type_Of_Change` (
	`TOC_ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`TOC_VALUE`	INTEGER
);
CREATE TABLE `Authors` (
	`AU_ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`AU_NAME`	TEXT,
	`AU_EMAIL`	TEXT
);
CREATE TABLE IF NOT EXISTS "Transitions" (
	`TR_ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`TR_SH_ID`	INTEGER,
	`TR_OLD_VERSION`	TEXT,
	`TR_NEW_VERSION`	TEXT,
	`TR_TRANSITION_ID`	INTEGER,
	`TR_TIME`	INTEGER
);
CREATE TABLE IF NOT EXISTS "Metrics" (
	`ME_ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`ME_TYPE_OF_METRIC`	TEXT,
	`ME_TR_ID`	INTEGER,
	`ME_VALUE`	INTEGER,
	FOREIGN KEY(`ME_VALUE`) REFERENCES `Transitions`(`TR_ID`) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "Builds" (
	`BU_ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`BU_REPO_ID`	INTEGER,
	`BU_EVENT_TYPE`	TEXT,
	`BU_FINISHED_AT`	TEXT,
	`BU_NUMBER`	INTEGER,
	`BU_STATE`	TEXT,
	`BU_RESULT`	TEXT,
	`BU_BRANCH_ID`	INTEGER,
	`BU_DURATION`	TEXT,
	`BU_MESSAGE`	TEXT,
	`BU_STARTED_AT`	TEXT,
	`BU_COMMIT_ID`	TEXT,
	FOREIGN KEY(`BU_BRANCH_ID`) REFERENCES `Branches`(`BR_ID`) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "Stats" (
	`ST_ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`ST_NAME`	TEXT,
	`ST_DURATION`	INTEGER,
	`ST_BIRTH`	INTEGER,
	`ST_DEATH`	TEXT,
	`ST_CHANGES`	INTEGER,
	`ST_S_START`	INTEGER,
	`ST_S_END`	INTEGER,
	`ST_AVG_S`	REAL
);
CREATE TABLE `Changes_Metrics` (
	`CM_ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`CM_DELETIONS`	TEXT,
	`CM_INSERTIONS`	TEXT,
	`CM_TYPE_ALT`	TEXT,
	`CM_KEY`	TEXT,
	`CM_TA_ID`	INTEGER,
	`CM_TR_ID`	INTEGER
);
CREATE VIEW Phases AS SELECT * FROM Releases, Commits, Transitions, Metrics, Branches WHERE Commits.CO_BRANCH_ID = Branches.BR_ID 
AND Commits.CO_TRANSITION_ID = Transitions.TR_ID AND Commits.CO_PREV_RELEASE_ID = Releases.RE_ID 
AND Metrics.ME_TR_ID = Transitions.TR_ID 
OR ( Commits.CO_BRANCH_ID = Branches.BR_ID AND Commits.CO_TRANSITION_ID = Transitions.TR_ID
AND Commits.CO_PREV_RELEASE_ID IS NULL AND Commits.CO_NEXT_RELEASE_ID = Releases.RE_ID 
AND Metrics.ME_TR_ID = Transitions.TR_ID )
ORDER BY (CO_DATE) ASC;
CREATE TABLE IF NOT EXISTS "Tables" (
	`TA_ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`TA_NAME`	TEXT,
	`TA_STATS_ID`	INTEGER,
	`TA_BR_ID`	INTEGER,
	FOREIGN KEY(`TA_STATS_ID`) REFERENCES `Stats`(`ST_ID`) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "Files_Affected" (
	`FA_ID`	INTEGER PRIMARY KEY AUTOINCREMENT,
	`FA_OLD_NAME`	TEXT,
	`FA_OLD_FULL_PATH`	TEXT,
	`FA_COMMIT_ID`	TEXT,
	`FA_NEW_NAME`	TEXT,
	`FA_NEW_FULL_PATH`	INTEGER
);
CREATE TABLE IF NOT EXISTS "Changes" (
	`CH_ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`CH_EVENT_TYPE`	TEXT,
	`CH_ATTRIBUTE_NAME`	TEXT,
	`CH_ATTRIBUTE_TYPE`	TEXT,
	`CH_IS_KEY`	INTEGER,
	`CH_PRIMARY_KEY`	INTEGER,
	`CH_FOREIGN_KEY`	TEXT,
	`CH_TR_ID`	INTEGER,
	`CH_TA_ID`	INTEGER,
	`CH_TOC_ID`	INTEGER,
	FOREIGN KEY(`CH_TR_ID`) REFERENCES `Transitions`(`TR_ID`) ON DELETE CASCADE,
	FOREIGN KEY(`CH_TA_ID`) REFERENCES `Tables`(`TA_ID`) ON DELETE CASCADE,
	FOREIGN KEY(`CH_TOC_ID`) REFERENCES `Type_Of_Change`(`TOC_ID`) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "Commits" (
	`CO_ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`CO_SHA`	TEXT,
	`CO_DATE`	INTEGER,
	`CO_HUMAN_DATE`	TEXT,
	`CO_TEXT`	TEXT,
	`CO_BRANCH_ID`	INTEGER,
	`CO_AUTHOR_ID`	INTEGER,
	`CO_PREV_RELEASE_ID`	INTEGER,
	`CO_NEXT_RELEASE_ID`	INTEGER,
	`CO_TRANSITION_ID`	INTEGER,
	`CO_BUILD_ID`	INTEGER,
	`CO_TEXT_SUMMARY`	TEXT,
	FOREIGN KEY(`CO_BRANCH_ID`) REFERENCES `Branches`(`BR_ID`) ON DELETE CASCADE,
	FOREIGN KEY(`CO_AUTHOR_ID`) REFERENCES `Authors`(`AU_ID`) ON DELETE CASCADE,
	FOREIGN KEY(`CO_PREV_RELEASE_ID`) REFERENCES `Releases`(`RE_ID`) ON DELETE CASCADE,
	FOREIGN KEY(`CO_NEXT_RELEASE_ID`) REFERENCES `Releases`(`RE_ID`) ON DELETE CASCADE,
	FOREIGN KEY(`CO_TRANSITION_ID`) REFERENCES `Transitions`(`TR_ID`) ON DELETE CASCADE,
	FOREIGN KEY(`CO_BUILD_ID`) REFERENCES `Builds`(`BU_ID`) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "Releases" (
	`RE_ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`RE_DATE`	INTEGER,
	`RE_HASH`	TEXT,
	`RE_NAME`	TEXT,
	`RE_BRANCH_ID`	INTEGER,
	`RE_TEXT_SUMMARY`	TEXT
);
CREATE TABLE IF NOT EXISTS "Issues" (
	`IS_ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`IS_PROJECT_ID`	INTEGER,
	`IS_NUMBER`	TEXT,
	`IS_COMMIT_ID`	INTEGER,
	`IS_ACTOR`	TEXT,
	`IS_BODY`	TEXT,
	`IS_LABELS`	TEXT,
	`IS_TITLE`	TEXT,
	`IS_CREATED_AT`	TEXT,
	`IS_UPDATED_AT`	TEXT,
	`IS_ASSIGNEE`	TEXT,
	`IS_STATUS`	TEXT,
	`IS_USER_ID`	TEXT,
	`IS_MILESTONE`	TEXT,
	`IS_CLOSED_AT`	TEXT,
	`IS_PREV_CREATED_COMMIT_ID`	INTEGER,
	`IS_NEXT_CREATED_COMMIT_ID`	INTEGER,
	`IS_PREV_UPDATED_COMMIT_ID`	INTEGER,
	`IS_NEXT_UPDATED_COMMIT_ID`	INTEGER,
	`IS_PREV_CLOSED_COMMIT_ID`	INTEGER,
	`IS_NEXT_CLOSED_COMMIT_ID`	INTEGER,
	`IS_PRIORITY`	TEXT,
	`IS_TYPE`	TEXT,
	`IS_CATEGORY`	TEXT,
	`IS_PERCENTAGE_DONE`	INTEGER,
	`IS_DUE_DATE`	TEXT,
	`IS_START_DATE`	TEXT,
	`IS_TARGET_VERSION`	TEXT,
	`IS_PROJECT`	TEXT,
	`USEFUL_SCORE`	INTEGER,
	FOREIGN KEY(`IS_PREV_CREATED_COMMIT_ID`) REFERENCES `Commits`(`CO_ID`) ON DELETE CASCADE,
	FOREIGN KEY(`IS_NEXT_CREATED_COMMIT_ID`) REFERENCES `Commits`(`CO_ID`) ON DELETE CASCADE,
	FOREIGN KEY(`IS_PREV_UPDATED_COMMIT_ID`) REFERENCES `Commits`(`CO_ID`) ON DELETE CASCADE,
	FOREIGN KEY(`IS_NEXT_UPDATED_COMMIT_ID`) REFERENCES `Commits`(`CO_ID`) ON DELETE CASCADE,
	FOREIGN KEY(`IS_PREV_CLOSED_COMMIT_ID`) REFERENCES `Commits`(`CO_ID`) ON DELETE CASCADE,
	FOREIGN KEY(`IS_NEXT_CLOSED_COMMIT_ID`) REFERENCES `Commits`(`CO_ID`) ON DELETE CASCADE
);
